[{"title":"事件捕获与事件冒泡","date":"2017-02-09T03:44:35.000Z","path":"2017/02/09/2017-02-09/","text":"前言这里首先要先讲一下什么是事件、事件流：事件：浏览器执行的动作，如click、load等。事件流：事件发生时会在元素节点与根节点之间按照特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程即DOM事件流。 正文123&lt;div id=\"outer\"&gt; &lt;div id=\"inner\"&gt;Click me!&lt;/div&gt;&lt;/div&gt; 上面代码中，如果两个元素都绑定了click事件，当点击后函数会怎样触发呢？ 为了解决这个问题微软和网景提出了两种几乎完全相反的概念，事件冒泡、事件捕获。 事件冒泡：事件会从最内层的元素开始发生，一直向上传播，直到document对象。div -&gt; body -&gt; html -&gt; document 事件捕获：事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。document -&gt; html -&gt; body -&gt; div addEventListener为了更清楚的理解事件捕获与事件冒泡，进一步了解addEventListener方法。addEventListener方法用来为一个特定的元素绑定一个事件处理函数，是JavaScript中的常用方法。addEventListener有三个参数：1element.addEventListener(event, function, useCapture) event：字符串，指定事件名，如click、blur等。function：指定事件触发时执行的函数。useCapture: 可选，Boolean，指定事件是否在捕获或冒泡阶段执行，true-事件句柄在捕获阶段执行，false-默认，事件句柄在冒泡阶段执行。 测试1234567891011this.$outerDiv = document.getElementById('outerDiv');this.$innerDiv = document.getElementById('innerDiv');this.$outerDiv.addEventListener('click', () =&gt; &#123; alert('I am outer div');&#125;, true);this.$innerDiv.addEventListener('click', () =&gt; &#123; alert('I am inner div');&#125;, true);&lt;div id=\"outer\"&gt; &lt;div id=\"inner\"&gt;Click me!&lt;/div&gt;&lt;/div&gt; useCapture为true，事件句柄在捕获阶段执行，所以alert顺序为 I am outer div , I am inner div。如果useCapture为false，事件句柄在冒泡阶段执行，顺序与上方相反。实践操作 如果想终止捕获或冒泡。添加event.stopPropagation()方法。","tags":[]},{"title":"细节注意（二） - for in","date":"2017-01-18T08:32:12.000Z","path":"2017/01/18/2017-01-18/","text":"官方for..in 语句用于对数组或者对象的属性进行循环操作。循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。 注意如果为Array的原型链添加属性方法的话，该属性方法会执行一次。如果遍历的数组内存储的不是Object 尽量别用for..in","tags":[]},{"title":"细节注意（一） - 浏览器缓存","date":"2017-01-12T11:58:26.000Z","path":"2017/01/12/2017-01-12/","text":"操作localStorage、sessionStorage对于前端开发工程师操作浏览器缓存很普遍，本文主要介绍操作localStorage和sessionStorage需要哪些注意。要注意localStorage和sessionStorage是key, value存储，而key和value只能为String。所以当你存储Object或者Array时，一定要转化为String。 1localStorage.setItem('arr', [1, 2, 3]); 这样操作后，你所存的arr会是 1,2,3; 正确的方式：1localStorage.setItem('arr', JSON.stringify([1, 2, 3])); 这样操作后，你所存的arr会是[1,2,3]; 而获取时要想获得数组的话，需要1JSON.parse(localStorage.getItem('arr')); 同理操作Object也是需要这样操作。 最最要注意的是如果你要set一个Number，取出来的时候要进行转化，否则运算是该值为String可能会导致你的程序计算不对。","tags":[]},{"title":"vue-cli与node6.x、win10x64的不兼容","date":"2016-12-29T11:32:10.000Z","path":"2016/12/29/2016-12-29/","text":"在很久之前，自己搭建了一套vue框架。运用了vuex、vue-router、vue-resource 等等的一套比较完成的Demo。最近无意间升级了node^6.2.0、公司的电脑系统为win10 x64,然后整个vue都启动不了了。而同样的环境 mac是可以的。很是费解。 提示的错误是不识别es6。找了一天走了很多弯路，以为是webpack问题、babel问题。其实都不是。 最后找到了一个人这么说：The vuejs-templates/webpack seems to have problems with Node ^6.0.0 running on Windows 10 x64, something with Babel not transpiling JavaScript files before the Webpack build. I filled an issue in the repo, hope it gets fixed soom to come back to the latest Node release. 我便把node升级到7。可以了。","tags":[]},{"title":"数组去重装X法","date":"2016-12-23T08:38:52.000Z","path":"2016/12/23/2016-12-23/","text":"不少公司招聘web前端时，免不了需要让面试者做题。本片主要讲一下当遇到数组去重的问题时，怎样让考官一瞬间懵逼。 一、for循环依次进行筛选这个网上太多了，随便搜搜就找到一大堆。 二、用filter特性123456789function removeRepeat(arr)&#123; return arr.filter(function(elem, pos) &#123; return arr.indexOf(elem) == pos; &#125;);&#125;var arr = new Array(\"1\",\"2\",\"3\",\"4\",\"4\",\"4\",\"4\",\"5\");var newArr = removeRepeat(arr);console.log(newArr); 利用filter特性达到数组去重。 三、装X让面试官暂时懵逼的方法1234var arr = [1,2,2,3,4,1,4,2],str = ''; var result = (function unique(num, arr, str) &#123; return arr.length &gt; 0 ? unique(arr.shift(), arr, str.indexOf(num) == -1 ? str += num : str) : str.split(''); &#125;)(arr.shift(), arr, str); 简单介绍一下思路，该方法是用回调和Array.shift()代替for循环，用三目代替if，增加严谨的逻辑，让人一时琢磨不透。总体思路每次获得数组的第一位元素，判断str内是否存在，如果存在继续回调，如果不存在插入，直到数组没有元素。面试官很大可能会让你讲解这段代码，你的装X时间开始了…. 如果同学们有更好的方法 可以发送邮件到 fighterdiwen@163.com 咱们一起进行交流。","tags":[]},{"title":"Hello World","date":"2016-12-23T08:36:02.000Z","path":"2016/12/23/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]